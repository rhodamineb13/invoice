// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "invoice/common/entity"

	mock "github.com/stretchr/testify/mock"
)

// InvoiceRepository is an autogenerated mock type for the InvoiceRepository type
type InvoiceRepository struct {
	mock.Mock
}

// GetInvoice provides a mock function with given fields: _a0
func (_m *InvoiceRepository) GetInvoice(_a0 context.Context) ([]entity.InvoiceListsDB, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoice")
	}

	var r0 []entity.InvoiceListsDB
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.InvoiceListsDB, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.InvoiceListsDB); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InvoiceListsDB)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertInvoice provides a mock function with given fields: _a0, _a1
func (_m *InvoiceRepository) InsertInvoice(_a0 context.Context, _a1 *entity.InvoiceDetailDB) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.InvoiceDetailDB) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectInvoice provides a mock function with given fields: _a0, _a1
func (_m *InvoiceRepository) SelectInvoice(_a0 context.Context, _a1 int) (*entity.InvoiceDetailDB, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SelectInvoice")
	}

	var r0 *entity.InvoiceDetailDB
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.InvoiceDetailDB, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.InvoiceDetailDB); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.InvoiceDetailDB)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInvoice provides a mock function with given fields: _a0, _a1
func (_m *InvoiceRepository) UpdateInvoice(_a0 context.Context, _a1 *entity.InvoiceDetailDB) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.InvoiceDetailDB) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewInvoiceRepository creates a new instance of InvoiceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInvoiceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *InvoiceRepository {
	mock := &InvoiceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
